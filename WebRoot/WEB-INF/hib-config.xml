<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
  http://www.springframework.org/schema/context   
   http://www.springframework.org/schema/context/spring-context-2.5.xsd
">
	<context:component-scan base-package="com.sxt" />
	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />


	<context:property-placeholder location="/WEB-INF/jdbc.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
        <!-- JDBC connection pool (use the built-in) -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 最大空闲值，当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!-- 最小空闲值，当空闲的连接数少于minIdle值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
   		<property name="validationQuery" value="${jdbc.validationQuery}"/>
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- key的名字前面都要加hibernate. -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect  
                   </prop>
				<!-- <prop key="hibernate.show_sql">true</prop> -->
				<prop key="hibernate.format_sql">true</prop>
				<!--  <prop key="hibernate.hbm2ddl.auto">update</prop> -->
			</props>
		</property>
		<property name="packagesToScan">
			<value>com.sxt.po</value>
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!--配置一个JdbcTemplate实例-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />
	<aop:config>
		<aop:pointcut expression="execution(public * com.sxt.service.*.*(..))"
			id="businessService" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="businessService" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<!-- find,get开头的方法不需要在事务中运行 。 
		有些情况是没有必要使用事务的，比如获取数据。开启事务本身对性能是有一定的影响的-->
			<tx:method name="*" />    <!-- 其他方法在事物中运行 -->
		</tx:attributes>
	</tx:advice>

</beans>
